{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","completed","changeFilter","deleteContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normFilter","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","setNumber","nameId","numberId","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","find","contact","checkName","alert","actions","className","s","form__title","htmlFor","type","form__input","onChange","pattern","title","placeholder","required","form__button","Filter","Filter__text","Filter__input","ev","ContactList","ContactList__container","map","ContactList__item","ContactList__text","ContactList__button","onClick","onDeleteContact","App","container","container__title","Contacts__title","itemsReducer","createReducer","contactsItems","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.40d346cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList__container\":\"ContactList_ContactList__container__5cpT4\",\"ContactList__item\":\"ContactList_ContactList__item__32iwS\",\"ContactList__text\":\"ContactList_ContactList__text__1K6RK\",\"ContactList__button\":\"ContactList_ContactList__button__2Fng3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__xk93q\",\"container__title\":\"App_container__title__DHkil\",\"Contacts__title\":\"App_Contacts__title__3oI7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__text\":\"Filter_Filter__text__14tZV\",\"Filter__input\":\"Filter_Filter__input__3RwEI\"};","import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const addContact = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n            completed: false,\r\n        },\r\n    }\r\n});\r\n\r\nexport const changeFilter = createAction('contacts/filter');\r\nexport const deleteContact = createAction('contacts/delete');\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n    const normFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({name}) =>\r\n    name.toLowerCase().includes(normFilter),\r\n  );\r\n};","import shortid from 'shortid';\r\nimport { useState } from \"react\";\r\n// import { connect } from 'react-redux';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactForm.module.css';\r\n\r\n\r\nfunction ContactForm() {\r\n    const contacts = useSelector(getContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    let nameId = shortid.generate();\r\n    let numberId = shortid.generate();\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const checkName = name => {\r\n        return contacts.find(\r\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n        )\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (checkName(name)) {\r\n            return alert(`${name} is already in contacts.`);\r\n        }\r\n        \r\n        dispatch(actions.addContact(name, number));\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={nameId}\r\n            >\r\n                Name\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                className={s.form__input}\r\n                name=\"name\"\r\n                id={nameId}\r\n                value={name}\r\n                onChange={handleChange}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                placeholder=\"Enter name\"\r\n                required\r\n            />\r\n                \r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={numberId}\r\n            >\r\n                Number\r\n            </label>\r\n            <input\r\n                type=\"tel\"\r\n                className={s.form__input}\r\n                name=\"number\"\r\n                id={numberId}\r\n                value={number}\r\n                onChange={handleChange}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                placeholder=\"Enter phone number\"\r\n                required\r\n            />\r\n                \r\n            <button\r\n                className={s.form__button}\r\n                type=\"submit\"\r\n            >\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//         items: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//         newContact: (name, number) => dispatch(actions.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","// import { connect } from \"react-redux\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n    const value = useSelector(getFilter);\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    return (\r\n        <label className={s.Filter__text}>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={s.Filter__input}\r\n                value={value}\r\n                onChange={ev => dispatch(actions.changeFilter(ev.currentTarget.value))}\r\n            />\r\n        </label>\r\n    )\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n\r\n\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onChange: (ev) => dispatch(changeFilter(ev.currentTarget.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","// import { connect } from 'react-redux';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactList.module.css';\r\n\r\n\r\nfunction ContactList() {\r\n    const contacts = useSelector(getVisibleContacts);\r\n\r\n    const dispatch = useDispatch();\r\n    const onDeleteContact = id => dispatch(actions.deleteContact(id));\r\n    \r\n\r\n    return (\r\n        <ul className={s.ContactList__container}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li\r\n                    className={s.ContactList__item}\r\n                    key={id}>\r\n                    <p className={s.ContactList__text}>{name}: {number}</p>\r\n                    <button\r\n                        className={s.ContactList__button}\r\n                        onClick={() => onDeleteContact(id)}>\r\n                        X\r\n                    </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    onDeleteContact: PropTypes.func,\r\n}\r\n\r\nexport default ContactList;\r\n\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n\r\n//     return allContacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n// };\r\n\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//     contacts: getVisibleContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport s from './App.module.css';\n\n\nexport default function App() {\n    return (\n      <div className={s.container}>\n        <h1 className={s.container__title}>Phonebook</h1>\n        <ContactForm />\n        <div>\n          <h2 className={s.Contacts__title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    );\n};\n\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {addContact, deleteContact, changeFilter} from './contacts-actions';\r\nimport contactsItems from '../../contacts.json';\r\n\r\n\r\nconst itemsReducer = createReducer(contactsItems, {\r\n    [addContact]: (state, { payload }) => [...state, payload],\r\n       \r\n    [deleteContact]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [changeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n});\r\n    ","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    },\r\n    middleware, \r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport {store, persistor} from './redux/store.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__title\":\"ContactForm_form__title__Rw4BQ\",\"form__input\":\"ContactForm_form__input__16kpQ\",\"form__button\":\"ContactForm_form__button__2CYzl\"};"],"sourceRoot":""}