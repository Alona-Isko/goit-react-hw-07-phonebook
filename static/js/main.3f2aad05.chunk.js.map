{"version":3,"sources":["components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","name","phone","post","deleteContact","nameId","delete","id","getLoading","state","contacts","loading","getContacts","items","getFilter","filter","getVisibleContacts","allContacts","normFilter","toLowerCase","contact","includes","changeFilter","createAction","ContactForm","useSelector","selectors","dispatch","useDispatch","useState","setName","setPhone","shortid","generate","phoneId","handleChange","event","currentTarget","value","reset","onSubmit","preventDefault","find","checkName","alert","operations","className","s","form__title","htmlFor","type","form__input","onChange","pattern","title","placeholder","required","form__button","filterId","Filter","Filter__text","Filter__input","ev","ContactList","isLoading","useEffect","length","ContactList__container","map","ContactList__item","ContactList__text","ContactList__button","onClick","onDeleteContact","App","container","container__title","Contacts__title","createReducer","fulfilled","payload","pending","rejected","error","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f2aad05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList__container\":\"ContactList_ContactList__container__3A2Cr\",\"ContactList__item\":\"ContactList_ContactList__item__9gmQC\",\"ContactList__text\":\"ContactList_ContactList__text__1ru7V\",\"ContactList__button\":\"ContactList_ContactList__button__2L9nh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__30MKz\",\"container__title\":\"App_container__title__cRf2h\",\"Contacts__title\":\"App_Contacts__title__ayemN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__text\":\"Filter_Filter__text__316j6\",\"Filter__input\":\"Filter_Filter__input__2G_-T\"};","import axios from \"axios\";\r\nimport { createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n\r\naxios.defaults.baseURL = 'https://61a8ad8333e9df0017ea3a3c.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n    'contacts/fetchContacts',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.get('/contacts');\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n    'contacts/addContact',\r\n    async ({ name, phone }, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.post('/contacts', {name, phone});\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n    'contacts/deleteContact',\r\n    async (nameId, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.delete(`/contacts/${nameId}`);\r\n            return data.id;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\n\r\n\r\n\r\n\r\n// export const fetchContacts = () => dispatch => {\r\n//     dispatch(fetchContactsRequest());\r\n\r\n//     axios\r\n//         .get('/contacts')\r\n//         .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n\r\n\r\n// async func\r\n// export const fetchContacts = () => async dispatch => {\r\n//     dispatch(fetchContactsRequest());\r\n\r\n//     try {\r\n//         const {data} = await axios.get('/contacts');\r\n//         dispatch(fetchContactsSuccess(data));\r\n//     } catch (error) {\r\n//         dispatch(fetchContactsError(error));\r\n//     }\r\n// };","export const getLoading = state => state.contacts.loading;\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const allContacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n    const normFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normFilter),\r\n  );\r\n};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const changeFilter = createAction('contacts/filter');\r\n\r\n\r\n// export const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\n// export const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n// export const addContactRequest = createAction('contacts/addContactRequest');\r\n// export const addContactSuccess = createAction('contacts/addContactSuccess');\r\n// export const addContactError = createAction('contacts/addContactError');\r\n\r\n// export const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\n// export const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\n// export const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n","import shortid from 'shortid';\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {operations, selectors} from '../../redux/contacts';\r\nimport s from './ContactForm.module.css';\r\n\r\n\r\nfunction ContactForm() {\r\n    const items = useSelector(selectors.getContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n\r\n    let nameId = shortid.generate();\r\n    let phoneId = shortid.generate();\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'phone':\r\n                setPhone(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    \r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const checkName = name =>\r\n            items.find(\r\n                contact => contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n        if (checkName(name)) {\r\n            return alert(`${name} is already in contacts.`);\r\n        } else {\r\n            dispatch(operations.addContact({name, phone}));\r\n        }\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setPhone('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={nameId}\r\n            >\r\n                Name\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                className={s.form__input}\r\n                name=\"name\"\r\n                id={nameId}\r\n                value={name}\r\n                onChange={handleChange}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                placeholder=\"Enter name\"\r\n                required\r\n            />\r\n                \r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={phoneId}\r\n            >\r\n                Number\r\n            </label>\r\n            <input\r\n                type=\"tel\"\r\n                className={s.form__input}\r\n                name=\"phone\"\r\n                id={phoneId}\r\n                value={phone}\r\n                onChange={handleChange}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                placeholder=\"Enter phone number\"\r\n                required\r\n            />\r\n                \r\n            <button\r\n                className={s.form__button}\r\n                type=\"submit\"\r\n            >\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//         items: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//         newContact: (name, number) => dispatch(actions.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import shortid from 'shortid';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { selectors, changeFilter } from \"../../redux/contacts\";\r\nimport s from './Filter.module.css';\r\n\r\nlet filterId = shortid.generate();\r\n\r\nfunction Filter(){\r\n    const value = useSelector(selectors.getFilter);\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    return (\r\n        <label htmlFor={filterId} className={s.Filter__text}>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={s.Filter__input}\r\n                value={value}\r\n                id={filterId}\r\n                onChange={ev => dispatch(changeFilter(ev.currentTarget.value))}\r\n            />\r\n        </label>\r\n    )\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n\r\n\r\n\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onChange: (ev) => dispatch(changeFilter(ev.currentTarget.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {operations, selectors} from '../../redux/contacts';\r\nimport s from './ContactList.module.css';\r\n\r\n\r\nfunction ContactList() {\r\n    const contacts = useSelector(selectors.getVisibleContacts);\r\n    const isLoading = useSelector(selectors.getLoading);\r\n    const dispatch = useDispatch();\r\n    const onDeleteContact = id => dispatch(operations.deleteContact(id));\r\n    \r\n    useEffect(() => {\r\n        dispatch(operations.fetchContacts());\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <h2>Loading...</h2>}\r\n            {contacts.length > 0 && (\r\n                <ul className={s.ContactList__container}>\r\n                    {contacts.map(({ id, name, phone }) => (\r\n                        <li\r\n                            className={s.ContactList__item}\r\n                            key={id}>\r\n                            <p className={s.ContactList__text}>{name}: {phone}</p>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={s.ContactList__button}\r\n                                onClick={() => onDeleteContact(id)}>\r\n                                X\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}     \r\n        </>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//     return allContacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n// };\r\n\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//     contacts: getVisibleContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport s from './App.module.css';\n\n\nexport default function App() {\n    return (\n      <div className={s.container}>\n        <h1 className={s.container__title}>Phonebook</h1>\n        <ContactForm />\n        <div>\n          <h2 className={s.Contacts__title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </div>\n    );\n};\n\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as operations from './contacts-operations';\r\nimport { changeFilter } from './contacts-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [operations.fetchContacts.fulfilled]: (_, {payload}) => payload,\r\n    [operations.addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n       \r\n    [operations.deleteContact.fulfilled]: (state, { payload }) =>\r\n        state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [operations.fetchContacts.pending]: () => true,\r\n    [operations.fetchContacts.fulfilled]: () => false,\r\n    [operations.fetchContacts.rejected]: () => false,\r\n\r\n    [operations.addContact.pending]: () => true,\r\n    [operations.addContact.fulfilled]: () => false,\r\n    [operations.addContact.rejected]: () => false,\r\n\r\n    [operations.deleteContact.pending]: () => true,\r\n    [operations.deleteContact.fulfilled]: () => false,\r\n    [operations.deleteContact.rejected]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n});\r\n\r\n    \r\n\r\n\r\n//\r\n// import { combineReducers } from 'redux';\r\n// import { createReducer } from '@reduxjs/toolkit';\r\n// import {\r\n//     addContactRequest,\r\n//     addContactSuccess,\r\n//     addContactError,\r\n//     deleteContactRequest,\r\n//     deleteContactSuccess,\r\n//     deleteContactError,\r\n//     changeFilter,\r\n//     fetchContactsRequest,\r\n//     fetchContactsSuccess,\r\n//     fetchContactsError,\r\n// } from './contacts-actions';\r\n\r\n\r\n// const items = createReducer([], {\r\n//     [fetchContactsSuccess]: (_, {payload}) => payload,\r\n//     [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n       \r\n//     [deleteContactSuccess]: (state, { payload }) =>\r\n//         state.filter(({ id }) => id !== payload),\r\n// });\r\n\r\n// const loading = createReducer(false, {\r\n//     [fetchContactsRequest]: () => true,\r\n//     [fetchContactsSuccess]: () => false,\r\n//     [fetchContactsError]: () => false,\r\n\r\n//     [addContactRequest]: () => true,\r\n//     [addContactSuccess]: () => false,\r\n//     [addContactError]: () => false,\r\n\r\n//     [deleteContactRequest]: () => true,\r\n//     [deleteContactSuccess]: () => false,\r\n//     [deleteContactError]: () => false,\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//     [changeFilter]: (_, {payload}) => payload,\r\n// });\r\n\r\n// const error = createReducer(null, {});\r\n\r\n// export default combineReducers({\r\n//     items,\r\n//     filter,\r\n//     loading,\r\n//     error,\r\n// });\r\n    ","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n            },\r\n        })\r\n            .concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//old code\r\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import logger from 'redux-logger';\r\n// import {\r\n//     // persistStore,\r\n//     FLUSH,\r\n//     REHYDRATE,\r\n//     PAUSE,\r\n//     PERSIST,\r\n//     PURGE,\r\n//     REGISTER,\r\n// } from 'redux-persist';\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const middleware = [\r\n//     ...getDefaultMiddleware({\r\n//         serializableCheck: {\r\n//             ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//         },\r\n//     }),\r\n//     logger,\r\n// ];\r\n\r\n\r\n// export const store = configureStore({\r\n//     reducer: {\r\n//         contacts: contactsReducer,\r\n//     },\r\n//     middleware, \r\n//     devTools: process.env.NODE_ENV === 'development',\r\n// });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport {store} from './redux/store.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__title\":\"ContactForm_form__title__1IGQG\",\"form__input\":\"ContactForm_form__input__3pxf6\",\"form__button\":\"ContactForm_form__button__3rfJi\"};"],"sourceRoot":""}